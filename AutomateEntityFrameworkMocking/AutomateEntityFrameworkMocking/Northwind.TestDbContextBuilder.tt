<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

var loader = new MetadataLoader(this);
var region = new CodeRegion(this);
var inputFile = @"Northwind.edmx";
var ItemCollection = loader.CreateEdmItemCollection(inputFile);

Code = new CodeGenerationTools(this);
EFTools = new MetadataTools(this);
ObjectNamespace = Code.VsNamespaceSuggestion();
ModelNamespace = loader.GetModelNamespace(inputFile);

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return string.Empty;
}
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

<#

if (!String.IsNullOrEmpty(ObjectNamespace))
{
#>
namespace <#=Code.EscapeNamespace(ObjectNamespace)#>
{
<#
    PushIndent(CodeRegion.GetIndent(1));
}

#>

	using System;
	using System.Collections.Generic;
	using System.Linq;

	using Moq;

	<#
	if (container.FunctionImports.Any())
	{
	#>
	using System.Data.Objects;
	<#
	}
	#>

	public class DbContextBuilder
	{   

	<#
	    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
	    {
	#>   
		
		public List<<#=Code.Escape(entitySet.ElementType)#>> <#=Code.Escape(entitySet)#> = new List<<#=Code.Escape(entitySet.ElementType)#>>();
		
	<#
	    }
	    
	#>

	    public Mock<IDbContext> BuildMockDbContext(MockBehavior mockBehavior)
	    {
	        var mockDbContext = new Mock<IDbContext>(mockBehavior);
	<#
	    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
	    {
	#>   	
			mockDbContext
				.Setup(context => context.<#=Code.Escape(entitySet)#>)
				.Returns(<#=Code.Escape(entitySet)#>.AsQueryable());
				
    		mockDbContext
                .Setup(context => context.Add(It.IsAny<<#=Code.Escape(entitySet.ElementType)#>>()))
                .Callback((<#=Code.Escape(entitySet.ElementType)#> dataRow) => <#=Code.Escape(entitySet)#>.Add(dataRow));		
	<#
	    }
	    
	#>	
			return mockDbContext;	
		}

	  	public Mock<IDbContext> BuildMockDbContext()
	    {
	        return BuildMockDbContext(MockBehavior.Default);
	    }
		
		public IDbContext BuildDbContext()
		{
		    var dbContext = Mock.Of<IDbContext>(
		          context =>
	<#
		bool isFirstItem = true;
	    foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
	    {		
			string prefix = "";
			if(!isFirstItem) prefix = "&& ";
	#>   
			<#= prefix#>context.<#=Code.Escape(entitySet)#> == <#=Code.Escape(entitySet)#>.AsQueryable()	
	<#
			if (isFirstItem) isFirstItem = false;
	    }
	    
	#>
			);
		return dbContext;
		}
		
	}

<#

if (!String.IsNullOrEmpty(ObjectNamespace))
{
    PopIndent();
#>
}
<#
}
#>
<#+
string ModelNamespace { get; set; }
string ObjectNamespace { get; set; }
CodeGenerationTools Code { get; set; }
MetadataTools EFTools { get; set; }

string GetResourceString(string resourceName)
{
	if(_resourceManager == null)
	{
		_resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
	}
	
    return _resourceManager.GetString(resourceName, null);
}
System.Resources.ResourceManager _resourceManager;
#>