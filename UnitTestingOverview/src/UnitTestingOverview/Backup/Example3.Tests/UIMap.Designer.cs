// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Example3.Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.SilverlightControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            SilverlightButton uILoginButton = this.UIBlankPageWindowsInteWindow.UIHomeDocument.UISilverlightControlHoPane.UIItemCustom.UIBusyIndicatorBusyIndicator.UILoginButton;
            #endregion

            // Go to web page 'http://localhost:52878/Example3TestPage.aspx' using new browser instance
            this.UIBlankPageWindowsInteWindow.LaunchUrl(new System.Uri(this.RecordedMethod1Params.UIBlankPageWindowsInteWindowUrl));

            // Click 'login' button
            Mouse.Click(uILoginButton, new Point(16, 13));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            SilverlightButton uIOKButton = this.UIBlankPageWindowsInteWindow.UIHomeDocument.UISilverlightControlHoPane.UIItemCustom.UIBusyIndicatorBusyIndicator.UIItemWindow.UILoginChildWindow.UIOKButton;
            #endregion

            // Verify that 'OK' button's property 'Enabled' equals 'True'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIOKButtonEnabled, uIOKButton.Enabled);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UIBlankPageWindowsInteWindow UIBlankPageWindowsInteWindow
        {
            get
            {
                if ((this.mUIBlankPageWindowsInteWindow == null))
                {
                    this.mUIBlankPageWindowsInteWindow = new UIBlankPageWindowsInteWindow();
                }
                return this.mUIBlankPageWindowsInteWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UIBlankPageWindowsInteWindow mUIBlankPageWindowsInteWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:52878/Example3TestPage.aspx' using new browser instance
        /// </summary>
        public string UIBlankPageWindowsInteWindowUrl = "http://localhost:52878/Example3TestPage.aspx";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'OK' button's property 'Enabled' equals 'True'
        /// </summary>
        public bool UIOKButtonEnabled = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBlankPageWindowsInteWindow : BrowserWindow
    {
        
        public UIBlankPageWindowsInteWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Blank Page";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Blank Page");
            this.WindowTitles.Add("http://localhost:52878/Example3TestPage.aspx");
            this.WindowTitles.Add("Home");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIHomeDocument UIHomeDocument
        {
            get
            {
                if ((this.mUIHomeDocument == null))
                {
                    this.mUIHomeDocument = new UIHomeDocument(this);
                }
                return this.mUIHomeDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIHomeDocument mUIHomeDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIHomeDocument : HtmlDocument
    {
        
        public UIHomeDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Home";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Example3TestPage.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:52878/Example3TestPage.aspx#/Home";
            this.WindowTitles.Add("Home");
            #endregion
        }
        
        #region Properties
        public UISilverlightControlHoPane UISilverlightControlHoPane
        {
            get
            {
                if ((this.mUISilverlightControlHoPane == null))
                {
                    this.mUISilverlightControlHoPane = new UISilverlightControlHoPane(this);
                }
                return this.mUISilverlightControlHoPane;
            }
        }
        #endregion
        
        #region Fields
        private UISilverlightControlHoPane mUISilverlightControlHoPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UISilverlightControlHoPane : HtmlDiv
    {
        
        public UISilverlightControlHoPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "silverlightControlHost";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=silverlightControlHost";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Home");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemCustom : HtmlCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["Id"] = null;
            this.SearchProperties[UITestControl.PropertyNames.Name] = null;
            this.SearchProperties["TagName"] = "OBJECT";
            this.FilterProperties["Class"] = null;
            this.FilterProperties["ControlDefinition"] = "data=\"data:application/x-oleobject;base6";
            this.FilterProperties["TagInstance"] = "1";
            this.WindowTitles.Add("Home");
            #endregion
        }
        
        #region Properties
        public UIBusyIndicatorBusyIndicator UIBusyIndicatorBusyIndicator
        {
            get
            {
                if ((this.mUIBusyIndicatorBusyIndicator == null))
                {
                    this.mUIBusyIndicatorBusyIndicator = new UIBusyIndicatorBusyIndicator(this);
                }
                return this.mUIBusyIndicatorBusyIndicator;
            }
        }
        #endregion
        
        #region Fields
        private UIBusyIndicatorBusyIndicator mUIBusyIndicatorBusyIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIBusyIndicatorBusyIndicator : SilverlightControl
    {
        
        public UIBusyIndicatorBusyIndicator(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "BusyIndicator";
            this.WindowTitles.Add("Home");
            #endregion
        }
        
        #region Properties
        public SilverlightButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new SilverlightButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[SilverlightButton.PropertyNames.AutomationId] = "loginButton";
                    this.mUILoginButton.WindowTitles.Add("Home");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private SilverlightButton mUILoginButton;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UIItemWindow : SilverlightControl
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Window";
            this.WindowTitles.Add("Home");
            #endregion
        }
        
        #region Properties
        public UILoginChildWindow UILoginChildWindow
        {
            get
            {
                if ((this.mUILoginChildWindow == null))
                {
                    this.mUILoginChildWindow = new UILoginChildWindow(this);
                }
                return this.mUILoginChildWindow;
            }
        }
        #endregion
        
        #region Fields
        private UILoginChildWindow mUILoginChildWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
    public class UILoginChildWindow : SilverlightChildWindow
    {
        
        public UILoginChildWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[SilverlightChildWindow.PropertyNames.AutomationId] = "childWindow";
            this.WindowTitles.Add("Home");
            #endregion
        }
        
        #region Properties
        public SilverlightButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new SilverlightButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[SilverlightButton.PropertyNames.AutomationId] = "loginButton";
                    this.mUIOKButton.WindowTitles.Add("Home");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private SilverlightButton mUIOKButton;
        #endregion
    }
}
